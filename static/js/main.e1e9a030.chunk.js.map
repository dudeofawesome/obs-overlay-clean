{"version":3,"sources":["utils/getter-setter.ts","spotify/services/spotify.service.ts","spotify/components/spotify-oauth/spotify-oauth.tsx","components/twitch-oauth/twitch-oauth.tsx","services/camera.service.ts","services/twitch.service.ts","context.tsx","components/row/row.tsx","components/column/column.tsx","components/true-center/true-center.tsx","components/settings-window/settings-tab-camera.tsx","components/settings-window/settings-tab-spotify.tsx","components/settings-window/settings-tab-twitch.tsx","components/settings-window/settings-window.tsx","components/face-cam/face-cam.tsx","components/infrequent-clock/infrequent-clock.tsx","components/notification/notification.tsx","spotify/components/notification-spotify/notification-spotify.tsx","components/notifications/notifications.tsx","components/side-bar/side-bar.tsx","components/portal-size/portal-size.tsx","components/game-portal/game-portal.tsx","components/overlay/overlay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getterString","key","store","localStorage","getItem","prefix","undefined","getterBool","v","getterDateTime","val","DateTime","fromMillis","parseInt","setterString","value","setItem","removeItem","setterBool","setterDateTime","toMillis","SpotifyService","_settings","_SpotifySettings","this","auth_token_exp","local","fetch","headers","Authorization","auth_token","then","r","get","json","error","catch","e","message","console","Error","startsWith","res","launchSpotifyOAuth","getSpotifyStatus","log","hidden","Promise","resolve","reject","timeout_id","redirect_url","window","location","origin","url","client_id","login_iframe","document","createElement","src","body","appendChild","setTimeout","remove","className","style","position","top","left","marginTop","marginLeft","width","height","transform","addEventListener","receiveOAuthResultMessage","event","data","type","clearTimeout","removeEventListener","href","enabled","auth_code","refresh_token","SpotifyOAuth","history","useHistory","useState","setError","useEffect","params","hash","search","split","filter","i","map","reduce","cur","set","Map","has","access_token","expires_in","spotify_service","plus","opener","postMessage","close","parent","push","TwitchOAuth","CameraService","_CameraSettings","navigator","mediaDevices","enumerateDevices","dev","kind","media_device_id","autofocus","TwitchService","_TwitchSettings","_client","_pubsub_client","_subscriber_listener","_follower_check_timer","_scopes","_new_follower","_new_subscriber","_new_donation","_new_donation_bits","_new_raid","launchTwitchOAuth","client_secret","method","access_token_exp","Date","now","join","user_name","TwitchClient","withCredentials","clientSecret","refreshToken","onRefresh","token","accessToken","helix","users","getUserByName","user","user_id","id","warn","createClient","notify_new_followers","notify_new_followers_freq","Subject","freq","valueOf","unsubscribe","timer","subscribe","a","getFollowers","newest_followers","oldest_in_last_cycle_i","findIndex","follower","minus","fromJSDate","followDate","new_followers","slice","length","next","notify_new_subscribers","PubSubClient","registerUserListener","onSubscription","userDisplayName","notify_donations","notify_raids","getFollows","followedUser","followers","Duration","getterDuration","notify_donations_bits","camera_service","CameraServiceContext","createContext","displayName","SpotifyServiceContext","twitch_service","TwitchServiceContext","Providers","props","Provider","children","Row","display","flexDirection","Column","TrueCenter","alignItems","justifyContent","SettingsTabCamera","video_ref","createRef","state","context","getMediaDevices","devices","setState","s","test_successful","test_error","toString","selectDeviceForPreview","device_id","current","getUserMedia","video","deviceId","media_stream","srcObject","play","Consumer","Card","variant","marginRight","CardContent","FormControlLabel","control","Checkbox","defaultChecked","onChange","target","checked","name","label","FormControl","disabled","InputLabel","htmlFor","Select","defaultValue","MenuItem","replace","ref","maxWidth","test_res","Component","contextType","SettingsTabSpotify","item","TextField","required","Button","onClick","testSpotifyAPI","SettingsTabTwitch","test_msg","setTestMsg","NotificationSettings","APISettings","authenticate","total","Typography","fontSize","color","gutterBottom","check","SettingsWindow","tabs","title","icon","selected_tab","Box","AppBar","Toolbar","IconButton","aria-label","edge","stopPropagation","onClose","Tabs","Tab","padding","FaceCam","marginBottom","error_msg","InfrequentClock","Notification","visible","icon_url","alt","time","toRelative","defaultProps","NotificationSpotify","_timer","timestamp","playing","status","is_playing","song_name","artist_name","artists","album_name","album","album_art_url","images","backgroundImage","refresh_interval","fromObject","minutes","Notifications","subscribeTwitch","new_follower","notifications","sort","b","diff","SideBar","PortalSize","test","parentElement","offsetWidth","offsetHeight","offsetTop","offsetLeft","right","innerWidth","GamePortal","show_size","set_show_size","Overlay","settings_open","setSettingsOpen","Dialog","open","PaperProps","backgroundColor","borderRadius","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1e9a030.chunk.js","sourcesContent":["import { DateTime, Duration } from 'luxon';\n\nexport function getterString<T extends { prefix: string }>(\n  key: keyof T,\n  store: T,\n): string | undefined {\n  if (store[key] == null) {\n    store[key] = (localStorage.getItem(`${store.prefix}_${key}`) ??\n      undefined) as any;\n  }\n  return store[key] as any;\n}\nexport function getterBool<T extends { prefix: string }>(\n  key: keyof T,\n  store: T,\n): boolean | undefined {\n  if (store[key] == null) {\n    const v = localStorage.getItem(`${store.prefix}_${key}`);\n    if (v === 'true') store[key] = true as any;\n    else if (v === 'false') store[key] = false as any;\n    else store[key] = undefined as any;\n  }\n  return store[key] as any;\n}\nexport function getterDateTime<T extends { prefix: string }>(\n  key: keyof T,\n  store: T,\n): DateTime | undefined {\n  if (store[key] == null) {\n    const val = localStorage.getItem(`${store.prefix}_${key}`);\n    if (val != null) {\n      return DateTime.fromMillis(parseInt(val));\n    } else {\n      return undefined;\n    }\n  }\n  return store[key] as any;\n}\nexport function getterDuration<T extends { prefix: string }>(\n  key: keyof T,\n  store: T,\n): Duration | undefined {\n  if (store[key] == null) {\n    const val = localStorage.getItem(`${store.prefix}_${key}`);\n    if (val != null) {\n      return Duration.fromMillis(parseInt(val));\n    } else {\n      return undefined;\n    }\n  }\n  return store[key] as any;\n}\n\nexport function setterString<T extends { prefix: string }>(\n  key: keyof T,\n  value: string | undefined,\n  store: T,\n): void {\n  store[key] = value as any;\n  if (value != null) {\n    localStorage.setItem(`${store.prefix}_${key}`, value);\n  } else {\n    localStorage.removeItem(`${store.prefix}_${key}`);\n  }\n}\nexport function setterBool<T extends { prefix: string }>(\n  key: keyof T,\n  value: boolean | undefined,\n  store: T,\n): void {\n  store[key] = value as any;\n  if (value != null) {\n    localStorage.setItem(`${store.prefix}_${key}`, value ? 'true' : 'false');\n  } else {\n    localStorage.removeItem(`${store.prefix}_${key}`);\n  }\n}\nexport function setterDateTime<T extends { prefix: string }>(\n  key: keyof T,\n  value: DateTime | undefined,\n  store: T,\n): void {\n  store[key] = value as any;\n  if (value != null) {\n    localStorage.setItem(`${store.prefix}_${key}`, value.toMillis() + '');\n  } else {\n    localStorage.removeItem(`${store.prefix}_${key}`);\n  }\n}\nexport function setterDuration<T extends { prefix: string }>(\n  key: keyof T,\n  value: Duration | undefined,\n  store: T,\n): void {\n  store[key] = value as any;\n  if (value != null) {\n    localStorage.setItem(`${store.prefix}_${key}`, value.valueOf() + '');\n  } else {\n    localStorage.removeItem(`${store.prefix}_${key}`);\n  }\n}\n","import { DateTime } from 'luxon';\n\nimport { SpotifyCurrentlyPlaying, SpotifyError } from './spotify';\nimport {\n  getterBool,\n  getterDateTime,\n  getterString,\n  setterBool,\n  setterDateTime,\n  setterString,\n} from '../../utils/getter-setter';\n\nexport class SpotifyService {\n  private _settings = new _SpotifySettings();\n\n  public set enabled(v: boolean | undefined) {\n    setterBool<_SpotifySettings>('enabled', v, this._settings);\n  }\n  public get enabled(): boolean | undefined {\n    return getterBool<_SpotifySettings>('enabled', this._settings);\n  }\n\n  public set client_id(v: string | undefined) {\n    setterString<_SpotifySettings>('client_id', v, this._settings);\n  }\n  public get client_id(): string | undefined {\n    return (\n      getterString<_SpotifySettings>('client_id', this._settings) ??\n      '90f61a9875dc44a28faf437b70e8b01b'\n    );\n  }\n\n  public set auth_code(v: string | undefined) {\n    setterString<_SpotifySettings>('auth_code', v, this._settings);\n  }\n  public get auth_code(): string | undefined {\n    return getterString<_SpotifySettings>('auth_code', this._settings);\n  }\n\n  public set refresh_token(v: string | undefined) {\n    setterString<_SpotifySettings>('refresh_token', v, this._settings);\n  }\n  public get refresh_token(): string | undefined {\n    return getterString<_SpotifySettings>('refresh_token', this._settings);\n  }\n\n  public set auth_token(v: string | undefined) {\n    setterString<_SpotifySettings>('auth_token', v, this._settings);\n  }\n  public get auth_token(): string | undefined {\n    return getterString<_SpotifySettings>('auth_token', this._settings);\n  }\n\n  public set auth_token_exp(v: DateTime | undefined) {\n    setterDateTime<_SpotifySettings>('auth_token_exp', v, this._settings);\n  }\n  public get auth_token_exp(): DateTime | undefined {\n    return getterDateTime<_SpotifySettings>('auth_token_exp', this._settings);\n  }\n\n  async getSpotifyStatus(): Promise<SpotifyCurrentlyPlaying | undefined> {\n    if (\n      this.auth_token_exp != null &&\n      this.auth_token_exp >= DateTime.local()\n    ) {\n      // use auth token to get\n      const res = await fetch(\n        `https://api.spotify.com/v1/me/player/currently-playing`,\n        {\n          headers: {\n            Authorization: `Bearer ${this.auth_token}`,\n          },\n        },\n      )\n        .then(r => {\n          if (r.headers.get('Content-Length') === '0') {\n            return null;\n          } else {\n            return r.json();\n          }\n        })\n        .then(r => {\n          if (r == null) {\n            return undefined;\n          } else if (r.error != null) {\n            throw r;\n          } else {\n            return r as SpotifyCurrentlyPlaying;\n          }\n        })\n        .catch((e: SpotifyError | any) => {\n          if (e.error != null) {\n            if (e.error.message === 'The access token expired') {\n              // TODO: refresh the token\n              console.error(e.error);\n              throw new Error(e.error.message);\n            } else if (e.error.message === 'Invalid access token') {\n              console.error(e.error);\n              throw new Error(e.error.message);\n            } else {\n              console.error(e.error);\n              throw new Error(e.error.message);\n            }\n          } else if (\n            e.message.startsWith('JSON.parse: unexpected end of data')\n          ) {\n            return undefined;\n          } else {\n            throw new Error(e);\n          }\n        });\n\n      return res;\n    } else {\n      // TODO: refresh the token\n      console.error('Spotify token is expired');\n      await this.launchSpotifyOAuth();\n      if (\n        this.auth_token_exp != null &&\n        this.auth_token_exp >= DateTime.local()\n      ) {\n        return await this.getSpotifyStatus();\n      } else {\n        console.log('Spotify token is still expired');\n        throw new Error('Spotify token is still expired');\n      }\n    }\n  }\n\n  launchSpotifyOAuth(hidden: boolean = false): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const redirect_url = `${window.location.origin}/oauth/spotify`;\n      const url =\n        `https://accounts.spotify.com/authorize?client_id=${this.client_id}&` +\n        `response_type=token&` +\n        `redirect_uri=${redirect_url}&` +\n        `scope=user-read-currently-playing`;\n      // const login_window = window.open(\n      //   url,\n      //   'Spotify Login',\n      //   'toolbar=no, menubar=no, width=600, height=700',\n      // );\n      const login_iframe = document.createElement('iframe');\n      login_iframe.src = url;\n      document.body.appendChild(login_iframe);\n\n      let timeout_id: number;\n\n      if (!hidden) {\n        // login_window?.focus();\n        login_iframe.className = 'window active';\n        login_iframe.style.position = 'fixed';\n        login_iframe.style.top = '0px';\n        login_iframe.style.left = '0px';\n        login_iframe.style.marginTop = '50%';\n        login_iframe.style.marginLeft = '50%';\n        login_iframe.style.width = '400px';\n        login_iframe.style.height = '500px';\n        login_iframe.style.transform = 'translate(-50%, -50%)';\n      } else {\n        timeout_id = window.setTimeout(() => {\n          reject(new Error('Timed out'));\n          // login_window?.close();\n          login_iframe.remove();\n        }, 5000);\n      }\n\n      const receiveOAuthResultMessage = (event: MessageEvent) => {\n        console.log(event);\n        if (\n          typeof event.data === 'object' &&\n          event.data.type === 'Spotify OAuth'\n        ) {\n          if (timeout_id != null) {\n            window.clearTimeout(timeout_id);\n          }\n          login_iframe.remove();\n          window.removeEventListener('message', receiveOAuthResultMessage);\n\n          if (event.data.href.startsWith('http')) {\n            resolve();\n          } else {\n            reject();\n          }\n        }\n      };\n\n      window.addEventListener('message', receiveOAuthResultMessage, false);\n    });\n  }\n}\n\nclass _SpotifySettings {\n  readonly prefix = 'spotify';\n\n  enabled?: boolean;\n\n  client_id?: string;\n  auth_code?: string;\n  refresh_token?: string;\n  auth_token?: string;\n  auth_token_exp?: DateTime;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { DateTime } from 'luxon';\n\nimport './spotify-oauth.scss';\nimport { SpotifyService } from '../../services/spotify.service';\n\nexport function SpotifyOAuth() {\n  const history = useHistory();\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const hash =\n      window.location.hash !== ''\n        ? window.location.hash\n        : window.location.search;\n    const params = hash\n      .split(/[?&#]/)\n      .filter(i => i !== '')\n      .map(i => i.split('='))\n      .reduce((cur, v) => cur.set(v[0], v[1]), new Map<string, string>());\n    console.log(params);\n\n    if (params.has('access_token') && params.has('expires_in')) {\n      const access_token = params.get('access_token') as string;\n      const expires_in = parseInt(params.get('expires_in') as string);\n\n      console.log(access_token, expires_in);\n\n      const spotify_service = new SpotifyService();\n      spotify_service.auth_token = access_token;\n      spotify_service.auth_token_exp = DateTime.local().plus(expires_in * 1000);\n\n      if (window.opener) {\n        window.opener.postMessage({\n          type: 'Spotify OAuth',\n          href: window.location.href,\n        });\n        window.close();\n      } else if (window.parent) {\n        window.parent.postMessage(\n          {\n            type: 'Spotify OAuth',\n            href: window.location.href,\n          },\n          '*',\n        );\n      } else {\n        history.push('/');\n      }\n    } else {\n      setError('Missing params');\n    }\n  }, [history]);\n\n  return (\n    <div>\n      <div>Redirecting…</div>\n      {error}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport function TwitchOAuth() {\n  const history = useHistory();\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const hash =\n      window.location.hash !== ''\n        ? window.location.hash\n        : window.location.search;\n    const params = hash\n      .split(/[?&#]/)\n      .filter(i => i !== '')\n      .map(i => i.split('='))\n      .reduce((cur, v) => cur.set(v[0], v[1]), new Map<string, string>());\n    console.log(params);\n\n    if (params.has('code')) {\n      const auth_code = params.get('code') as string;\n\n      console.log(auth_code);\n\n      if (window.opener) {\n        window.opener.postMessage({\n          type: 'Twitch OAuth',\n          auth_code,\n        });\n        window.close();\n      } else if (window.parent) {\n        window.parent.postMessage(\n          {\n            type: 'Twitch OAuth',\n            auth_code,\n          },\n          '*',\n        );\n      } else {\n        history.push('/');\n      }\n    } else {\n      setError('Missing params');\n    }\n  }, [history]);\n\n  return (\n    <div>\n      <div>Redirecting…</div>\n      {error}\n    </div>\n  );\n}\n","import {\n  getterBool,\n  getterString,\n  setterBool,\n  setterString,\n} from '../utils/getter-setter';\n\nexport class CameraService {\n  private _settings = new _CameraSettings();\n\n  public get media_device_id(): string | undefined {\n    return getterString<_CameraSettings>('media_device_id', this._settings);\n  }\n  public set media_device_id(v: string | undefined) {\n    setterString<_CameraSettings>('media_device_id', v, this._settings);\n  }\n  public get enabled(): boolean | undefined {\n    return getterBool<_CameraSettings>('enabled', this._settings);\n  }\n  public set enabled(v: boolean | undefined) {\n    setterBool<_CameraSettings>('enabled', v, this._settings);\n  }\n  public get autofocus(): boolean | undefined {\n    return getterBool<_CameraSettings>('autofocus', this._settings);\n  }\n  public set autofocus(v: boolean | undefined) {\n    setterBool<_CameraSettings>('autofocus', v, this._settings);\n  }\n\n  public async getMediaDevices(): Promise<MediaDeviceInfo[] | undefined> {\n    return (await navigator.mediaDevices?.enumerateDevices()).filter(\n      dev => dev.kind === 'videoinput',\n    );\n  }\n}\n\nclass _CameraSettings {\n  readonly prefix = 'camera';\n\n  media_device_id?: string;\n\n  enabled?: boolean;\n  autofocus?: boolean;\n}\n","import TwitchClient, { HelixFollow } from 'twitch';\nimport PubSubClient from 'twitch-pubsub-client';\nimport {\n  PubSubListener,\n  PubSubSubscriptionMessage,\n} from 'twitch-pubsub-client';\nimport { DateTime, Duration } from 'luxon';\nimport { Subject, timer, Subscription } from 'rxjs';\n\nimport {\n  getterBool,\n  getterDateTime,\n  getterDuration,\n  getterString,\n  setterBool,\n  setterDateTime,\n  setterDuration,\n  setterString,\n} from '../utils/getter-setter';\n\nexport class TwitchService {\n  private _settings = new _TwitchSettings();\n\n  private _client?: TwitchClient;\n  private _pubsub_client?: PubSubClient;\n  private _subscriber_listener?: PubSubListener<PubSubSubscriptionMessage>;\n  private _follower_check_timer?: Subscription;\n\n  private readonly _scopes = ['chat:read', 'channel_subscriptions'];\n\n  private _new_follower?: Subject<HelixFollow>;\n  private _new_subscriber?: Subject<PubSubSubscriptionMessage>;\n  private _new_donation?: Subject<any>;\n  private _new_donation_bits?: Subject<any>;\n  private _new_raid?: Subject<any>;\n\n  public get new_follower() {\n    return this._new_follower;\n  }\n  public get new_subscriber() {\n    return this._new_subscriber;\n  }\n  public get new_donation() {\n    return this._new_donation;\n  }\n  public get new_donation_bits() {\n    return this._new_donation_bits;\n  }\n  public get new_raid() {\n    return this._new_raid;\n  }\n\n  public get client_id(): string | undefined {\n    return (\n      getterString<_TwitchSettings>('client_id', this._settings) ??\n      'pbcwgkykya4jjufuuybfl91jn2zhro'\n    );\n  }\n  public set client_id(v: string | undefined) {\n    setterString<_TwitchSettings>('client_id', v, this._settings);\n  }\n\n  public get client_secret(): string | undefined {\n    return getterString<_TwitchSettings>('client_secret', this._settings);\n  }\n  public set client_secret(v: string | undefined) {\n    setterString<_TwitchSettings>('client_secret', v, this._settings);\n  }\n\n  public get access_token(): string | undefined {\n    return getterString<_TwitchSettings>('access_token', this._settings);\n  }\n  public set access_token(v: string | undefined) {\n    setterString<_TwitchSettings>('access_token', v, this._settings);\n  }\n\n  public get access_token_exp(): DateTime | undefined {\n    return getterDateTime<_TwitchSettings>('access_token_exp', this._settings);\n  }\n  public set access_token_exp(v: DateTime | undefined) {\n    setterDateTime<_TwitchSettings>('access_token_exp', v, this._settings);\n  }\n\n  public get refresh_token(): string | undefined {\n    return getterString<_TwitchSettings>('refresh_token', this._settings);\n  }\n  public set refresh_token(v: string | undefined) {\n    setterString<_TwitchSettings>('refresh_token', v, this._settings);\n  }\n\n  public get user_id(): string | undefined {\n    return getterString<_TwitchSettings>('user_id', this._settings);\n  }\n  public set user_id(v: string | undefined) {\n    setterString<_TwitchSettings>('user_id', v, this._settings);\n  }\n\n  public get user_name(): string | undefined {\n    return (\n      getterString<_TwitchSettings>('user_name', this._settings) ??\n      'DudeOfAwesome'\n    );\n  }\n  public set user_name(v: string | undefined) {\n    setterString<_TwitchSettings>('user_name', v, this._settings);\n  }\n\n  public get notify_new_followers(): boolean | undefined {\n    return getterBool<_TwitchSettings>('notify_new_followers', this._settings);\n  }\n  public set notify_new_followers(v: boolean | undefined) {\n    setterBool<_TwitchSettings>('notify_new_followers', v, this._settings);\n  }\n\n  public get notify_new_followers_freq(): Duration | undefined {\n    return (\n      getterDuration<_TwitchSettings>(\n        'notify_new_followers_freq',\n        this._settings,\n      ) ?? Duration.fromMillis(60000)\n    );\n  }\n  public set notify_new_followers_freq(v: Duration | undefined) {\n    setterDuration<_TwitchSettings>(\n      'notify_new_followers_freq',\n      v,\n      this._settings,\n    );\n  }\n\n  public get notify_new_subscribers(): boolean | undefined {\n    return getterBool<_TwitchSettings>(\n      'notify_new_subscribers',\n      this._settings,\n    );\n  }\n  public set notify_new_subscribers(v: boolean | undefined) {\n    setterBool<_TwitchSettings>('notify_new_subscribers', v, this._settings);\n  }\n\n  public get notify_donations(): boolean | undefined {\n    return getterBool<_TwitchSettings>('notify_donations', this._settings);\n  }\n  public set notify_donations(v: boolean | undefined) {\n    setterBool<_TwitchSettings>('notify_donations', v, this._settings);\n  }\n\n  public get notify_donations_bits(): boolean | undefined {\n    return getterBool<_TwitchSettings>('notify_donations_bits', this._settings);\n  }\n  public set notify_donations_bits(v: boolean | undefined) {\n    setterBool<_TwitchSettings>('notify_donations_bits', v, this._settings);\n  }\n\n  public get notify_raids(): boolean | undefined {\n    return getterBool<_TwitchSettings>('notify_raids', this._settings);\n  }\n  public set notify_raids(v: boolean | undefined) {\n    setterBool<_TwitchSettings>('notify_raids', v, this._settings);\n  }\n\n  async authenticate() {\n    const redirect_url = `${window.location.origin}/oauth/twitch`;\n    const auth_code = await this.launchTwitchOAuth();\n    const res = await fetch(\n      `https://id.twitch.tv/oauth2/token?` +\n        `client_id=${this.client_id}&` +\n        `client_secret=${this.client_secret}&` +\n        `code=${auth_code}&` +\n        `grant_type=authorization_code&` +\n        `redirect_uri=${redirect_url}`,\n      { method: 'POST' },\n    )\n      .then(r => r.json())\n      .then(r => {\n        if (r.access_token != null) {\n          return r as TwitchAuthToken;\n        } else {\n          throw r;\n        }\n      });\n    console.log(res);\n\n    this.access_token = res.access_token;\n    this.access_token_exp = DateTime.fromMillis(\n      Date.now() + res.expires_in * 1000,\n    );\n    this.refresh_token = res.refresh_token;\n  }\n\n  launchTwitchOAuth(hidden: boolean = false): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const redirect_url = `${window.location.origin}/oauth/twitch`;\n      const url =\n        `https://id.twitch.tv/oauth2/authorize?client_id=${this.client_id}&` +\n        `response_type=code&` +\n        `redirect_uri=${redirect_url}&` +\n        `scope=${this._scopes.join('+')}`;\n      // const login_window = window.open(\n      //   url,\n      //   'Twitch Login',\n      //   'toolbar=no, menubar=no, width=600, height=700',\n      // );\n      const login_iframe = document.createElement('iframe');\n      login_iframe.src = url;\n      document.body.appendChild(login_iframe);\n\n      let timeout_id: number;\n\n      if (!hidden) {\n        // login_window?.focus();\n        login_iframe.className = 'window active';\n        login_iframe.style.position = 'fixed';\n        login_iframe.style.top = '0px';\n        login_iframe.style.left = '0px';\n        login_iframe.style.marginTop = '50%';\n        login_iframe.style.marginLeft = '50%';\n        login_iframe.style.width = '400px';\n        login_iframe.style.height = '500px';\n        login_iframe.style.transform = 'translate(-50%, -50%)';\n      } else {\n        // login_iframe.style.display = 'none';\n        timeout_id = window.setTimeout(() => {\n          reject(new Error('Timed out'));\n          // login_window?.close();\n          login_iframe.remove();\n        }, 5000);\n      }\n\n      const receiveOAuthResultMessage = (event: MessageEvent) => {\n        // debugger;\n        console.log(event);\n        if (\n          typeof event.data === 'object' &&\n          event.data.type === 'Twitch OAuth'\n        ) {\n          if (timeout_id != null) {\n            window.clearTimeout(timeout_id);\n          }\n\n          login_iframe.remove();\n          window.removeEventListener('message', receiveOAuthResultMessage);\n\n          if (event.data.auth_code != null) {\n            resolve(event.data.auth_code);\n          } else {\n            reject();\n          }\n        }\n      };\n\n      window.addEventListener('message', receiveOAuthResultMessage, false);\n    });\n  }\n\n  async createClient() {\n    if (this.client_id == null) {\n      throw new Error('client_id is null');\n    } else if (this.user_name == null) {\n      throw new Error('user_id is null');\n    } else if (this.client_secret == null) {\n      throw new Error('client_secret is null');\n    } else if (this.refresh_token == null) {\n      throw new Error('refresh_token is null');\n    } else {\n      this._client = TwitchClient.withCredentials(\n        this.client_id,\n        this.access_token,\n        this._scopes,\n        {\n          clientSecret: this.client_secret,\n          refreshToken: this.refresh_token,\n          onRefresh: token => {\n            this.access_token = token.accessToken;\n            this.access_token = token.refreshToken;\n          },\n        },\n      );\n\n      const user = await this._client.helix.users.getUserByName(this.user_name);\n      console.log(user);\n\n      if (user == null) {\n        throw new Error(`Couldn't find user ${this.user_name}`);\n      } else {\n        this.user_id = user.id;\n      }\n    }\n  }\n\n  async subscribe() {\n    if (this._client == null) {\n      console.warn('_client is null. trying to create');\n      await this.createClient();\n      if (this._client == null) {\n        throw new Error('_client is null');\n      }\n    }\n    if (this.user_id == null) {\n      throw new Error('user_id is null');\n    } else if (this.user_name == null) {\n      throw new Error('user_name is null');\n    } else {\n      if (this.notify_new_followers) {\n        if (this.notify_new_followers_freq == null) {\n          throw new Error('notify_new_followers_freq is null');\n        }\n        if (this._new_follower == null) {\n          this._new_follower = new Subject();\n        }\n\n        const freq = this.notify_new_followers_freq.valueOf();\n        if (this._follower_check_timer != null) {\n          this._follower_check_timer.unsubscribe();\n        }\n        this._follower_check_timer = timer(freq, freq).subscribe(async () => {\n          const newest_followers = await this.getFollowers();\n          console.log(newest_followers);\n          const oldest_in_last_cycle_i = newest_followers.data.findIndex(\n            follower =>\n              DateTime.local().minus(freq) >\n              DateTime.fromJSDate(follower.followDate),\n          );\n          const new_followers = newest_followers.data.slice(\n            0,\n            oldest_in_last_cycle_i,\n          );\n\n          console.log('NEW_FOLLOWERS');\n          console.log(new_followers);\n\n          if (new_followers.length !== 0) {\n            const a = timer(0, freq / (new_followers.length + 1)).subscribe(\n              i => {\n                console.log(i);\n                if (new_followers[i] == null) {\n                  throw new Error('new_followers index exceeded');\n                }\n                this._new_follower?.next(new_followers[i]);\n                if (i >= new_followers.length - 1) {\n                  a.unsubscribe();\n                }\n              },\n            );\n          }\n        });\n      }\n      if (this.notify_new_subscribers) {\n        this._pubsub_client = new PubSubClient();\n        await this._pubsub_client.registerUserListener(this._client);\n\n        if (this._new_subscriber == null) {\n          this._new_subscriber = new Subject();\n        }\n\n        this._subscriber_listener = await this._pubsub_client.onSubscription(\n          this.user_id,\n          message => {\n            console.log(message);\n            this._new_subscriber?.next(message);\n            console.log(`${message.userDisplayName} just subscribed!`);\n          },\n        );\n      }\n      if (this.notify_donations) {\n        console.warn('Donation notifications are not supported at this time');\n      }\n      if (this.notify_raids) {\n      }\n    }\n  }\n\n  unsubscribe() {\n    this._subscriber_listener?.remove();\n  }\n\n  async getFollowers() {\n    if (this._client == null) {\n      throw new Error('_client is null');\n    } else if (this.user_id == null) {\n      throw new Error('user_id is null');\n    }\n\n    const followers = await this._client.helix.users.getFollows({\n      followedUser: this.user_id,\n    });\n    if (followers == null) {\n      throw new Error('followers is null');\n    }\n\n    console.log(followers);\n    return followers;\n  }\n}\n\nclass _TwitchSettings {\n  readonly prefix = 'twitch';\n\n  client_id?: string;\n  client_secret?: string;\n  access_token?: string;\n  access_token_exp?: DateTime;\n  refresh_token?: string;\n  user_id?: string;\n  user_name?: string;\n\n  notify_new_followers?: boolean;\n  notify_new_followers_freq?: Duration;\n  notify_new_subscribers?: boolean;\n  notify_donations?: boolean;\n  notify_donations_bits?: boolean;\n  notify_raids?: boolean;\n}\n\nexport interface TwitchAuthToken {\n  access_token: string;\n  /** Number of seconds until the token expires */\n  expires_in: number;\n  refresh_token: string;\n  scope: string[];\n  token_type: 'bearer' | string;\n}\n","import React, { createContext, PropsWithChildren } from 'react';\n\nimport { CameraService } from './services/camera.service';\nimport { SpotifyService } from './spotify/services/spotify.service';\nimport { TwitchService } from './services/twitch.service';\n\nexport const camera_service = new CameraService();\nexport const CameraServiceContext = createContext(camera_service);\nCameraServiceContext.displayName = 'CameraService';\n\nexport const spotify_service = new SpotifyService();\nexport const SpotifyServiceContext = createContext(spotify_service);\nSpotifyServiceContext.displayName = 'SpotifyService';\n\nexport const twitch_service = new TwitchService();\nexport const TwitchServiceContext = createContext(twitch_service);\nTwitchServiceContext.displayName = 'TwitchService';\n\nexport function Providers(props: PropsWithChildren<{}>) {\n  return (\n    <CameraServiceContext.Provider value={camera_service}>\n      <SpotifyServiceContext.Provider value={spotify_service}>\n        <TwitchServiceContext.Provider value={twitch_service}>\n          {props.children}\n        </TwitchServiceContext.Provider>\n      </SpotifyServiceContext.Provider>\n    </CameraServiceContext.Provider>\n  );\n}\n\nfunction _createMask(...args: boolean[]): number {\n  let a = 0b0;\n  for (let i = 0; i < args.length; i++) {\n    a &= (args[i] ? 1 : 0) << i;\n  }\n  console.log(a);\n\n  const b = args.reduce((acc, curr, i) => (acc &= (curr ? 1 : 0) << i), 0b0);\n  console.log(b);\n\n  return a;\n}\n","import React, { ComponentProps } from 'react';\n\nexport function Row(props: ComponentProps<'div'>) {\n  return (\n    <div\n      {...props}\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        ...props.style,\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React, { ComponentProps } from 'react';\n\nimport { Row } from '../row/row';\n\nexport function Column(props: ComponentProps<'div'>) {\n  return (\n    <Row {...props} style={{ ...props.style, flexDirection: 'column' }}>\n      {props.children}\n    </Row>\n  );\n}\n","import * as React from 'react';\nimport { Props } from 'react';\n\nexport function TrueCenter(props: Props<void>) {\n  return (\n    <div\n      style={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React, { Component, ClassAttributes, RefObject, createRef } from 'react';\nimport {\n  FormControlLabel,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Checkbox,\n  Card,\n  CardContent,\n} from '@material-ui/core';\n\nimport { CameraServiceContext } from '../../context';\nimport { CameraService } from '../../services/camera.service';\nimport { Row } from '../row/row';\nimport { Column } from '../column/column';\nimport { TrueCenter } from '../true-center/true-center';\n\nimport './settings-window.scss';\n\nexport class SettingsTabCamera extends Component<\n  ClassAttributes<void>,\n  SettingsTabSpotifyState\n> {\n  static contextType = CameraServiceContext;\n  private camera_service?: CameraService;\n  private video_ref: RefObject<HTMLVideoElement> = createRef();\n\n  constructor(props: ClassAttributes<void>) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    this.camera_service = this.context;\n\n    try {\n      const devices = await this.camera_service?.getMediaDevices();\n      this.setState(s => ({\n        ...s,\n        devices,\n      }));\n    } catch (e) {\n      this.setState(s => ({\n        ...s,\n        test_successful: false,\n        test_error: e.toString(),\n      }));\n    } finally {\n      // we can access media devices\n      if (\n        this.camera_service?.media_device_id != null &&\n        this.camera_service?.media_device_id !== ''\n      ) {\n        this.selectDeviceForPreview(this.camera_service.media_device_id);\n      }\n    }\n  }\n\n  async selectDeviceForPreview(device_id: string) {\n    if (\n      (this.state.devices?.length ?? 0) > 0 &&\n      this.video_ref.current != null\n    ) {\n      try {\n        const media_stream = await navigator.mediaDevices.getUserMedia({\n          video: { deviceId: device_id },\n        });\n        this.video_ref.current.srcObject = media_stream;\n      } catch (e) {\n        console.error(e);\n      }\n      this.video_ref.current.addEventListener('loadeddata', () => {\n        this.video_ref.current?.play();\n      });\n    }\n  }\n\n  render() {\n    return (\n      <TrueCenter>\n        <CameraServiceContext.Consumer>\n          {camera_service => (\n            <Row>\n              <Card variant=\"outlined\" style={{ marginRight: '15px' }}>\n                <CardContent>\n                  <Column>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          defaultChecked={camera_service.enabled ?? false}\n                          onChange={e =>\n                            (camera_service.enabled = e.target.checked)\n                          }\n                          name=\"Spotify Enabled\"\n                        />\n                      }\n                      label=\"Enable Camera\"\n                    />\n                    <FormControl\n                      disabled={\n                        this.state.devices == null ||\n                        this.state.devices.length === 0\n                      }\n                    >\n                      <InputLabel htmlFor=\"device-select\">Camera</InputLabel>\n                      <Select\n                        id=\"device-select\"\n                        defaultValue={camera_service.media_device_id ?? ''}\n                        onChange={e => {\n                          camera_service.media_device_id = e.target\n                            .value as string;\n                          this.selectDeviceForPreview(e.target.value as string);\n                        }}\n                      >\n                        {this.state.devices?.map((dev, i) => (\n                          <MenuItem key={i} value={dev.deviceId}>\n                            {dev.label.replace(\n                              / \\([a-z0-9]{4,4}:[a-z0-9]{4,4}\\)$/,\n                              '',\n                            )}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                    <video\n                      ref={this.video_ref}\n                      style={{ maxWidth: '100%' }}\n                    ></video>\n                  </Column>\n                </CardContent>\n              </Card>\n              <Column>\n                {\n                  {\n                    true: <div>{this.state.test_res}</div>,\n                    false: <div>{this.state.test_error}</div>,\n                  }['true']\n                }\n              </Column>\n            </Row>\n          )}\n        </CameraServiceContext.Consumer>\n      </TrueCenter>\n    );\n  }\n}\n\ninterface SettingsTabSpotifyState {\n  devices?: MediaDeviceInfo[];\n\n  test_successful?: boolean;\n  test_res?: string;\n  test_error?: string;\n}\n","import React, { Component, ClassAttributes } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { SpotifyServiceContext } from '../../context';\nimport { SpotifyService } from '../../spotify/services/spotify.service';\nimport { Row } from '../row/row';\nimport { Column } from '../column/column';\nimport { TrueCenter } from '../true-center/true-center';\n\nimport './settings-window.scss';\n\nexport class SettingsTabSpotify extends Component<\n  ClassAttributes<void>,\n  SettingsTabSpotifyState\n> {\n  static contextType = SpotifyServiceContext;\n  private spotify_service?: SpotifyService;\n\n  constructor(props: ClassAttributes<void>) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.spotify_service = this.context;\n\n    this.setState(s => ({\n      ...s,\n      enabled: this.spotify_service?.enabled ?? false,\n      client_id:\n        this.spotify_service?.client_id ?? '90f61a9875dc44a28faf437b70e8b01b',\n    }));\n  }\n\n  async testSpotifyAPI() {\n    this.setState(state => ({ ...state, test_successful: undefined }));\n    try {\n      const res = await this.spotify_service?.getSpotifyStatus();\n      this.setState(state => ({\n        ...state,\n        test_successful: true,\n        test_res: res?.item?.name,\n      }));\n    } catch (e) {\n      this.setState(state => ({\n        ...state,\n        test_successful: false,\n        test_res: e.message,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <TrueCenter>\n        <Row>\n          <Card variant=\"outlined\" style={{ marginRight: '15px' }}>\n            <CardContent>\n              <SpotifyServiceContext.Consumer>\n                {spotify_service => (\n                  <Column>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          defaultChecked={spotify_service.enabled ?? false}\n                          onChange={e =>\n                            (spotify_service.enabled = e.target.checked)\n                          }\n                          name=\"Spotify Enabled\"\n                        />\n                      }\n                      label=\"Show Spotify Status\"\n                    />\n                    <TextField\n                      id=\"client_id\"\n                      label=\"Spotify Client ID\"\n                      defaultValue={spotify_service.client_id ?? ''}\n                      required\n                      onChange={e =>\n                        (spotify_service.client_id = e.target.value)\n                      }\n                    />\n                  </Column>\n                )}\n              </SpotifyServiceContext.Consumer>\n            </CardContent>\n          </Card>\n          <Column>\n            <Button\n              variant=\"contained\"\n              onClick={() => this.spotify_service?.launchSpotifyOAuth()}\n            >\n              Authenticate\n            </Button>\n            <Button onClick={() => this.testSpotifyAPI()}>Test Spotify</Button>\n            {\n              {\n                true: <div>{this.state.test_res}</div>,\n                false: <div>{this.state.test_error}</div>,\n              }['true']\n            }\n          </Column>\n        </Row>\n      </TrueCenter>\n    );\n  }\n}\n\ninterface SettingsTabSpotifyState {\n  test_successful?: boolean;\n  test_res?: string;\n  test_error?: string;\n}\n","import React, { useState } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\n\nimport { Row } from '../row/row';\nimport { Column } from '../column/column';\nimport { TrueCenter } from '../true-center/true-center';\nimport { TwitchServiceContext } from '../../context';\n\nimport './settings-window.scss';\n\nexport function SettingsTabTwitch() {\n  const [test_msg, setTestMsg] = useState('');\n\n  return (\n    <TrueCenter>\n      <Row>\n        <Card variant=\"outlined\" style={{ marginRight: '15px' }}>\n          <CardContent>\n            <NotificationSettings />\n          </CardContent>\n        </Card>\n        <Column>\n          <Card variant=\"outlined\" style={{ marginRight: '15px' }}>\n            <CardContent>\n              <APISettings />\n            </CardContent>\n          </Card>\n          <TwitchServiceContext.Consumer>\n            {twitch_service => (\n              <Column>\n                <Button\n                  variant=\"contained\"\n                  onClick={async () => {\n                    await twitch_service.authenticate();\n                    await twitch_service.createClient();\n                  }}\n                >\n                  Authenticate\n                </Button>\n                <Button\n                  onClick={async () => {\n                    await twitch_service\n                      .subscribe()\n                      .then(() => 'Success')\n                      .catch(e => e);\n                    setTestMsg(\n                      `${\n                        (await twitch_service.getFollowers()).total\n                      } followers`,\n                    );\n                  }}\n                >\n                  Test Twitch\n                </Button>\n                <div>{test_msg}</div>\n              </Column>\n            )}\n          </TwitchServiceContext.Consumer>\n        </Column>\n      </Row>\n    </TrueCenter>\n  );\n}\n\nfunction NotificationSettings() {\n  return (\n    <Column>\n      <Typography\n        style={{ fontSize: '0.8rem' }}\n        color=\"textSecondary\"\n        gutterBottom\n      >\n        Notifications\n      </Typography>\n      <TwitchServiceContext.Consumer>\n        {twitch_service =>\n          [\n            {\n              label: 'New followers',\n              value: twitch_service.notify_new_followers ?? false,\n              onChange: (v: boolean) =>\n                (twitch_service.notify_new_followers = v),\n            },\n            {\n              label: 'New subscribers',\n              value: twitch_service.notify_new_subscribers ?? false,\n              onChange: (v: boolean) =>\n                (twitch_service.notify_new_subscribers = v),\n            },\n            {\n              label: 'Donations',\n              value: twitch_service.notify_donations ?? false,\n              onChange: (v: boolean) => (twitch_service.notify_donations = v),\n            },\n            {\n              label: 'Bit donations',\n              value: twitch_service.notify_donations_bits ?? false,\n              onChange: (v: boolean) =>\n                (twitch_service.notify_donations_bits = v),\n            },\n            {\n              label: 'Raids / hosts',\n              value: twitch_service.notify_raids ?? false,\n              onChange: (v: boolean) => (twitch_service.notify_raids = v),\n            },\n          ].map((check, i) => (\n            <FormControlLabel\n              key={i}\n              control={\n                <Checkbox\n                  // checked={check.value}\n                  defaultChecked={check.value}\n                  onChange={e => check.onChange(e.target.checked)}\n                  name={check.label}\n                />\n              }\n              label={check.label}\n            />\n          ))\n        }\n      </TwitchServiceContext.Consumer>\n    </Column>\n  );\n}\n\nfunction APISettings() {\n  return (\n    <TwitchServiceContext.Consumer>\n      {twitch_service => (\n        <Column>\n          <TextField\n            id=\"user_name\"\n            label=\"Twitch Username\"\n            required\n            defaultValue={twitch_service.user_name ?? ''}\n            onChange={e => (twitch_service.user_name = e.target.value)}\n          />\n          <TextField\n            id=\"client_id\"\n            label=\"Client ID\"\n            required\n            defaultValue={twitch_service.client_id ?? ''}\n            onChange={e => (twitch_service.client_id = e.target.value)}\n          />\n          <TextField\n            id=\"client_secret\"\n            label=\"Client Secret\"\n            type=\"password\"\n            required\n            defaultValue={twitch_service.client_secret ?? ''}\n            onChange={e => (twitch_service.client_secret = e.target.value)}\n          />\n        </Column>\n      )}\n    </TwitchServiceContext.Consumer>\n  );\n}\n","import React, { Component, ComponentProps } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport IconClose from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FaSpotify, FaCamera, FaTwitch } from 'react-icons/fa';\n\nimport { SettingsTabCamera } from './settings-tab-camera';\nimport { SettingsTabSpotify } from './settings-tab-spotify';\nimport { SettingsTabTwitch } from './settings-tab-twitch';\n\nimport './settings-window.scss';\nimport '../window/window.scss';\n\nexport class SettingsWindow extends Component<\n  SettingsWindowProps,\n  SettingsWindowState\n> {\n  readonly tabs: { title: string; icon: any }[] = [\n    { title: 'Camera', icon: <FaCamera /> },\n    { title: 'Spotify', icon: <FaSpotify /> },\n    { title: 'Twitch', icon: <FaTwitch /> },\n  ];\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      selected_tab: 0,\n    };\n  }\n\n  render() {\n    return (\n      <Box className=\"window\">\n        <AppBar position=\"relative\">\n          <Toolbar variant=\"dense\">\n            <IconButton\n              aria-label=\"close\"\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={e => {\n                e.stopPropagation();\n                this.props?.onClose?.();\n              }}\n            >\n              <IconClose />\n            </IconButton>\n            <Tabs\n              variant=\"fullWidth\"\n              value={this.state.selected_tab}\n              onChange={(e, v) =>\n                this.setState(s => ({ ...s, selected_tab: v }))\n              }\n            >\n              {this.tabs.map((v, i) => (\n                <Tab\n                  key={i}\n                  // label={v.title}\n                  icon={v.icon}\n                />\n              ))}\n            </Tabs>\n          </Toolbar>\n        </AppBar>\n        {\n          [\n            <Box padding=\"20px 15px\">\n              <SettingsTabCamera />\n            </Box>,\n            <Box padding=\"20px 15px\">\n              <SettingsTabSpotify />\n            </Box>,\n            <Box padding=\"20px 15px\">\n              <SettingsTabTwitch />\n            </Box>,\n          ][this.state.selected_tab]\n        }\n      </Box>\n    );\n  }\n}\n\ninterface SettingsWindowProps extends ComponentProps<'div'> {\n  onClose?: () => void;\n}\n\ninterface SettingsWindowState {\n  selected_tab: number;\n}\n","import React, { Component, createRef, RefObject } from 'react';\n\nimport { CameraServiceContext } from '../../context';\nimport { CameraService } from '../../services/camera.service';\n\nimport './face-cam.scss';\nimport '../window/window.scss';\n\nexport class FaceCam extends Component<{}, FaceCamState> {\n  static contextType = CameraServiceContext;\n  private camera_service?: CameraService;\n  private video_ref: RefObject<HTMLVideoElement>;\n\n  constructor(props: {}) {\n    super(props);\n    this.video_ref = createRef();\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    this.camera_service = this.context;\n\n    if (this.video_ref.current != null) {\n      try {\n        const media_stream = await navigator.mediaDevices.getUserMedia({\n          video: { deviceId: this.camera_service?.media_device_id },\n        });\n        this.video_ref.current.srcObject = media_stream;\n      } catch (e) {\n        console.error(e);\n      }\n      this.video_ref.current.addEventListener('loadeddata', () => {\n        this.video_ref.current?.play();\n      });\n    }\n  }\n\n  async componentDidUpdate() {\n    if (this.video_ref.current != null) {\n      try {\n        const media_stream = await navigator.mediaDevices.getUserMedia({\n          video: { deviceId: this.camera_service?.media_device_id },\n        });\n        this.video_ref.current.srcObject = media_stream;\n      } catch (e) {\n        console.error(e);\n      }\n      this.video_ref.current.addEventListener('loadeddata', () => {\n        this.video_ref.current?.play();\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"face-cam window\"\n        style={!this.camera_service?.enabled ? { marginBottom: '0px' } : {}}\n      >\n        {this.state?.error_msg}\n        {this.camera_service?.enabled ? (\n          <video ref={this.video_ref}></video>\n        ) : null}\n      </div>\n    );\n  }\n}\n\ninterface FaceCamState {\n  error_msg?: string;\n}\n","import React, { Component } from 'react';\nimport { Subscription, timer } from 'rxjs';\n\nexport class InfrequentClock extends Component<any, { i: number }> {\n  private timer?: Subscription;\n\n  componentDidMount() {\n    this.timer = timer(60000, 60000).subscribe(i =>\n      this.setState(s => ({ ...s, i })),\n    );\n  }\n\n  componentWillUnmount() {\n    this.timer?.unsubscribe();\n  }\n\n  render() {\n    return (\n      <div {...this.props} title={this.state.i.toString()}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { DateTime } from 'luxon';\n\nimport { InfrequentClock } from '../infrequent-clock/infrequent-clock';\nimport { Row } from '../row/row';\nimport { Column } from '../column/column';\n\nimport './notification.scss';\n\nexport class Notification extends Component<NotificationProps> {\n  static defaultProps = {\n    visible: true,\n  };\n\n  render() {\n    return (\n      <Column\n        className=\"notification\"\n        style={{ display: this.props.visible ? undefined : 'none' }}\n      >\n        <Row className=\"header\">\n          {this.props.icon_url != null ? (\n            <img className=\"icon\" src={this.props.icon_url} alt=\"app icon\" />\n          ) : null}\n          <div className=\"name\">{this.props.name}</div>\n          <div className=\"spacer\"></div>\n          {this.props.time != null ? (\n            <InfrequentClock className=\"time\">\n              {this.props.time.toRelative({ style: 'narrow' })}\n            </InfrequentClock>\n          ) : null}\n        </Row>\n        <div className=\"body\">{this.props.children}</div>\n      </Column>\n    );\n  }\n}\n\nexport interface NotificationProps {\n  name: string;\n  icon_url?: string;\n  time?: DateTime;\n  visible: boolean;\n}\n","import React, { Component } from 'react';\nimport { Duration, DateTime } from 'luxon';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { timer, Subscription } from 'rxjs';\n\nimport { SpotifyServiceContext } from '../../../context';\nimport { Notification } from '../../../components/notification/notification';\nimport { Row } from '../../../components/row/row';\nimport { Column } from '../../../components/column/column';\nimport { SpotifyService } from '../../services/spotify.service';\n\nimport './notification-spotify.scss';\n\nexport class NotificationSpotify extends Component<\n  NotificationSpotifyProps,\n  NotificationSpotifyState\n> {\n  static contextType = SpotifyServiceContext;\n  static defaultProps = {\n    refresh_interval: Duration.fromObject({ minutes: 1 }),\n  };\n\n  private spotify_service?: SpotifyService;\n  private _timer?: Subscription;\n\n  constructor(\n    props: NotificationSpotifyProps,\n    state: NotificationSpotifyState,\n  ) {\n    super(props);\n    this.state = {\n      timestamp: DateTime.local(),\n      playing: false,\n    };\n  }\n\n  componentDidMount() {\n    this.spotify_service = this.context;\n    // this.updateSpotify();\n    this._timer = timer(0, 60000).subscribe(async () => {\n      if (this.spotify_service?.enabled) {\n        const status = await this.spotify_service.getSpotifyStatus();\n        if (status != null) {\n          this.setState(s => ({\n            ...s,\n            // timestamp:\n            //   res.timestamp != null ? DateTime.fromMillis(res.timestamp) : null,\n            playing: status.is_playing,\n            song_name: status.item?.name,\n            artist_name: status.item?.artists\n              ?.slice(\n                0,\n                status.item?.artists.length <= 3\n                  ? status.item?.artists.length\n                  : 3,\n              )\n              .map(a => a.name)\n              .join(', '),\n            album_name: status.item?.album.name,\n            album_art_url: status.item?.album.images[2].url,\n          }));\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._timer?.unsubscribe();\n  }\n\n  render() {\n    return (\n      <Notification\n        name=\"Spotify\"\n        icon_url=\"https://lh3.googleusercontent.com/UrY7BAZ-XfXGpfkeWg0zCCeo-7ras4DCoRalC_WXXWTK9q5b0Iw7B0YQMsVxZaNB7DM=s180\"\n        visible={this.state.song_name != null}\n      >\n        <Row className=\"status\">\n          <div\n            className=\"album-art\"\n            style={{\n              backgroundImage: `url('${this.state.album_art_url}')`,\n            }}\n          ></div>\n          <Column className=\"info\" style={{ justifyContent: 'center' }}>\n            <div className=\"song-name\">{this.state.song_name}</div>\n            <div className=\"artist-name\">{this.state.artist_name}</div>\n            <div className=\"album-name\">{this.state.album_name}</div>\n          </Column>\n          <div className=\"play-status\">\n            {this.state.playing ? <FaPlay /> : <FaPause />}\n          </div>\n        </Row>\n      </Notification>\n    );\n  }\n}\n\nexport interface NotificationSpotifyProps {\n  refresh_interval?: Duration;\n}\n\nexport interface NotificationSpotifyState {\n  timestamp?: DateTime;\n  playing?: boolean;\n  song_name?: string;\n  artist_name?: string;\n  album_name?: string;\n  album_art_url?: string;\n  song_duration?: Duration;\n}\n","import React, { Component, ClassAttributes } from 'react';\nimport { DateTime } from 'luxon';\nimport { HelixFollow } from 'twitch';\n\nimport { Notification } from '../notification/notification';\nimport { TwitchServiceContext } from '../../context';\nimport { TwitchService } from '../../services/twitch.service';\nimport { NotificationSpotify } from '../../spotify/components/notification-spotify/notification-spotify';\n\nimport './notifications.scss';\nimport '../window/window.scss';\n\nexport class Notifications extends Component<\n  ClassAttributes<void>,\n  NotificationsState\n> {\n  static contextType = TwitchServiceContext;\n  private twitch_service?: TwitchService;\n\n  constructor(props: ClassAttributes<void>) {\n    super(props);\n    this.state = { followers: [] };\n  }\n\n  componentDidMount() {\n    this.twitch_service = this.context;\n\n    this.subscribeTwitch();\n  }\n\n  async subscribeTwitch() {\n    try {\n      await this.twitch_service?.subscribe();\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.twitch_service?.new_follower?.subscribe(follower => {\n        console.log('Notifications got a new follower');\n        this.setState(s => ({ ...s, followers: [follower, ...s.followers] }));\n      });\n    }\n  }\n\n  render() {\n    // const notifications: JSX.Element[] = [0, 1, 2, 3, 4, 5, 6].map(\n    //   (notification, i) => (\n    //     <Notification\n    //       key={i.toString()}\n    //       name=\"Twitch Thing\"\n    //       time={DateTime.local().minus(\n    //         Duration.fromObject({ minutes: Math.random() * 50 }),\n    //       )}\n    //     >\n    //       test\n    //     </Notification>\n    //   ),\n    // );\n    // if (spotify_api_key != null) {\n    //   notifications.push(\n    //     <NotificationSpotify\n    //       key={'spotify'}\n    //       api_key={spotify_api_key}\n    //     ></NotificationSpotify>,\n    //   );\n    // }\n\n    const notifications = this.state.followers.map((follower, i) => (\n      <Notification\n        key={i.toString()}\n        name=\"New Follower\"\n        time={DateTime.fromJSDate(follower.followDate)}\n      >\n        {follower.userDisplayName} just followed!\n      </Notification>\n    ));\n\n    notifications.push(\n      <NotificationSpotify key={'spotify'}></NotificationSpotify>,\n    );\n\n    return (\n      <div className=\"notifications\">\n        {notifications.sort((a, b) => {\n          // TODO: this whole thing is probably wrong\n          if (a.props.time == null) {\n            return -1;\n          } else if (b.props.time == null) {\n            return 1;\n          } else {\n            // TODO: this might not return a negative\n            return (b.props.time as DateTime)\n              .diff(a.props.time as DateTime)\n              .valueOf();\n          }\n        })}\n      </div>\n    );\n  }\n}\n\ninterface NotificationsState {\n  followers: HelixFollow[];\n}\n","import React, { ComponentProps } from 'react';\nimport { FaceCam } from '../face-cam/face-cam';\nimport { Notifications } from '../notifications/notifications';\n\nimport './side-bar.scss';\n\nexport function SideBar(props: ComponentProps<'div'>) {\n  return (\n    <div {...props} className={[props.className, 'side-bar'].join(' ')}>\n      <Notifications></Notifications>\n      <FaceCam></FaceCam>\n    </div>\n  );\n}\n","import React, { Component, createRef } from 'react';\nimport './portal-size.css';\n\nexport class PortalSize extends Component<{}> {\n  private test = createRef<HTMLDivElement>();\n\n  // constructor(props: {}) {\n  //   super(props);\n  //   // const parent = findDOMNode(this)?.parentElement;\n  // }\n\n  componentDidMount() {\n    this.setState({});\n  }\n\n  render() {\n    const width = this.test.current?.parentElement?.offsetWidth;\n    const height = this.test.current?.parentElement?.offsetHeight;\n    const top = this.test.current?.parentElement?.offsetTop;\n    const left = this.test.current?.parentElement?.offsetLeft;\n    const right =\n      window.innerWidth -\n      ((this.test.current?.parentElement?.offsetLeft ?? 0) + (width ?? 0));\n\n    return (\n      <div\n        className=\"portal-size\"\n        ref={this.test}\n        onClick={e => e.stopPropagation()}\n      >\n        <div>\n          {width ?? '?'}×{height ?? '?'}\n        </div>\n        <div className=\"details\">\n          <div>Top: {top ?? '?'}</div>\n          <div>Left: {left ?? '?'}</div>\n          <div>Right: {right !== 0 ? right : '?'}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport './game-portal.css';\nimport '../window/window.scss';\nimport { PortalSize } from '../portal-size/portal-size';\n\nexport function GamePortal() {\n  const [show_size, set_show_size] = useState(false);\n\n  return (\n    <div\n      className=\"game-portal window active\"\n      onClick={() => set_show_size(!show_size)}\n    >\n      {show_size ? <PortalSize></PortalSize> : null}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Dialog } from '@material-ui/core';\n\nimport { SideBar } from '../side-bar/side-bar';\nimport { GamePortal } from '../game-portal/game-portal';\nimport { SettingsWindow } from '../settings-window/settings-window';\nimport { Row } from '../row/row';\n\nimport './overlay.scss';\n\nexport function Overlay() {\n  const [settings_open, setSettingsOpen] = useState(false);\n\n  return (\n    <div className=\"overlay\">\n      <Row style={{ height: '100vh', justifyContent: 'space-between' }}>\n        <SideBar onClick={() => setSettingsOpen(true)} />\n        <GamePortal />\n      </Row>\n      <Dialog\n        open={settings_open}\n        onClose={() => setSettingsOpen(false)}\n        PaperProps={{\n          style: { backgroundColor: 'transparent', borderRadius: 'unset' },\n        }}\n      >\n        <SettingsWindow onClose={() => setSettingsOpen(false)} />\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { SpotifyOAuth } from './spotify/components/spotify-oauth/spotify-oauth';\nimport { TwitchOAuth } from './components/twitch-oauth/twitch-oauth';\nimport { SettingsWindow } from './components/settings-window/settings-window';\nimport { TrueCenter } from './components/true-center/true-center';\nimport { Providers } from './context';\nimport { Overlay } from './components/overlay/overlay';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Providers>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Overlay />\n          </Route>\n          <Route path=\"/oauth/spotify\">\n            <SpotifyOAuth />\n          </Route>\n          <Route path=\"/oauth/twitch\">\n            <TwitchOAuth />\n          </Route>\n          <Route path=\"/settings\">\n            <TrueCenter>\n              <SettingsWindow />\n            </TrueCenter>\n          </Route>\n        </Switch>\n      </Router>\n    </Providers>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}